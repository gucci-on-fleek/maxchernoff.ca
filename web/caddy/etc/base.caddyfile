# Source Code for maxchernoff.ca
# https://github.com/gucci-on-fleek/maxchernoff.ca
# SPDX-License-Identifier: MPL-2.0+ OR CC-BY-SA-4.0+
# SPDX-FileCopyrightText: 2025 Max Chernoff

# Define the minifier
(minify) {
	# JavaScript/JSON
	replace {
		match {
			header Content-Type "text/javascript*"
			header Content-Type "application/json*"
			header Content-Type "*+json*"
		}
		re `^//.*\n|/\s*\*[^\0]*?\*\/\s*|\s*(\n)\s*|\s+([^-\w])` "${1}${2}"
	}

	# CSS
	replace {
		match {
			header Content-Type "text/css*"
		}
		re `/\*[^\0]*?\*\/|\s*\n\s*|([^-\w)])\s+` "${1}"
	}

	# XML
	replace {
		match {
			header Content-Type "text/xml*"
			header Content-Type "application/xml*"
			header Content-Type "*+xml*"
			header !X-No-Minify
		}
		re `<![-]-[^\0]*?[-]->\s*|\s*(\n)\s*|([^-\w<!])\s+([^-\w<!])` "${1}${2}${3}"
	}
}

# Define the default options for all sites
(default-base) {
	# Compress responses
	encode zstd gzip

	header {
		# Security headers
		X-Content-Type-Options nosniff
		?Cross-Origin-Resource-Policy same-origin
		?Content-Security-Policy "default-src 'none'; frame-ancestors 'none'; form-action 'none'; style-src 'self' 'unsafe-inline'; img-src 'self' https: data:; script-src 'self'; script-src-elem 'self';"

		# Prerendering
		Supports-Loading-Mode credentialed-prerender uncredentialed-prerender
	}

	# Use www.maxchernoff.ca for special URLs
	@rewrite-special {
		path /.well-known/* /ads.txt /app-ads.txt /apple-touch-icon*.png /favicon.ico /favicon.svg /robots.txt /touch-icon*.png /sellers.json
	}
	handle @rewrite-special {
		# Serve the files
		root * /srv
		file_server

		# Minify
		import minify

		# Caching
		header Cache-Control max-age=1209600 # 2 weeks
		cache

		# Set the correct Content-Types
		header /.well-known/traffic-advice {
			Content-Type application/trafficadvice+json
		}

		header /.well-known/dnt {
			Content-Type application/tracking-status+json
		}

		header /.well-known/host-meta {
			Content-Type /application/xrd+xml
		}

		# `time` URL
		handle /.well-known/time {
			header Content-Type text/plain
			templates mime text/plain
			header Cache-Control no-cache
		}

		# Clean up some root-level URLs
		rewrite /ads.txt /.well-known/ads.txt
		rewrite /app-ads.txt /.well-known/app-ads.txt
		rewrite /robots.txt /.well-known/robots.txt
		rewrite /sellers.json /.well-known/sellers.json

		rewrite /apple-touch-icon*.png /assets/apple-touch-icon.png
		rewrite /favicon.ico /assets/favicon.ico
		rewrite /favicon.svg /assets/favicon.svg
		rewrite /touch-icon*.png /assets/apple-touch-icon.png
	}

	header /assets/* {
		Cache-Control max-age=86400 # 1 day
	}

	# Allow access to the icons and CSS from other sites
	@cross-origin {
		path /assets/style.css /favicon.svg /favicon.ico /apple-touch-icon.png
		header_regexp Referer "^https://(.*\.)?(maxchernoff\.ca|duck\.tel)/"
	}
	header @cross-origin {
		Cross-Origin-Resource-Policy cross-origin
	}

	# No sitemaps, so cache the response for a long time
	@sitemaps {
		path /sitemap.xml /sitemap.txt /sitemaps.xml /sitemap.xml.gz /sitemap_index.xml
	}
	handle @sitemaps {
		header Cache-Control max-age=2592000 # 30 days
		respond * 410 {
			close
		}
	}

	# Zip-bomb any requests to malicious URLs
	@bad-url {
		expression `
		(path(
		"*.php*",
		"*/.env",
		"*/.git/*",
		"*phpinfo*",
		"/.*",
		"/*.yml",
		"/actuator/*",
		"/backup",
		"/cgi-bin/*",
		"/config.json",
		"/media/system/js/core.js",
		"/owa/*",
		"/sftp-config.json",
		"/wordpress*",
		"/wp-*",
		"/honeypot/seriously-there-is-nothing-here*"
		) &&
		!path("/.well-known/*")) ||
		header({"User-Agent": "Go-http-client/*"})
		`
	}
	@has-zstd {
		expression `{http.request.header.Accept-Encoding}.contains("zstd")`
	}
	handle @bad-url {
		root * /srv
		file_server {
			status 418
		}

		header Cache-Control max-age=31536000 # 1 year

		handle @has-zstd {
			header Content-Encoding zstd
			header Content-Type "text/html; charset=utf-8"
			rewrite * /files/login.html.zstd
		}
		handle {
			header Content-Encoding gzip
			header Content-Type "text/html; charset=utf-8"
			rewrite * /files/login.html.gz
		}
	}
}

(www.maxchernoff.ca) {
	import default

	# Serve static files from /srv
	try_files {path}.html {path}
	file_server {
		hide /includes/* .gitignore retain-empty-folder
	}

	# Status page
	handle /status {
		header Content-Type "application/json; charset=utf-8"
		header Cache-Control max-age=5
		templates {
			mime application/json
		}
	}

	# Preload some resources
	@html `{http.request.header.Accept}.contains("text/html")`
	header @html Link "</assets/style.css>; rel=\"preload\"; as=\"style\", </favicon.svg>; rel=\"icon\"; type=\"image/svg+xml\""

	# Analytics
	header /analytics/* {
		-Content-Security-Policy
		-Link
		Cache-Control "max-age=60"
	}
	basic_auth /analytics/* {
		analytics {env.CADDY_HTTP_CREDENTIALS}
	}

	# Stardew Valley
	header /tools/Stardew-Valley-Item-Finder/* {
		-Content-Security-Policy
	}
	templates /tools/Stardew-Valley-Item-Finder/* {
		mime text/javascript
		between /*! !*/
	}

	redir /tools/Stardew-Valley-Item-Finder/robots.txt /robots.txt permanent
	redir /tools/stardew-valley-item-finder /tools/Stardew-Valley-Item-Finder/ permanent

	# Convert Markdown files to HTML
	templates
	rewrite /p/* /includes/index.html
	rewrite / /includes/index

	# Atom feed
	@pretty-atom {
		header Sec-Fetch-Mode navigate
	}

	handle /atom.xml {
		header @pretty-atom {
			# Browsers will force a download for "application/atom+xml", but
			# will allow processing "<?xml-stylesheet ...?>" directives for
			# "application/xml", so we'll use that if the request is from a web
			# browser.
			Content-Type "application/xml; charset=utf-8"
			defer
		}
		header Content-Type "application/atom+xml; charset=utf-8"
		header Cache-Control max-age=86400 # 1 day
		header Access-Control-Allow-Origin "*"
		header X-No-Minify "true"
		templates {
			mime application/xml application/atom+xml text/xml
		}
	}

	handle /assets/atom.xslt {
		header Content-Type "application/xslt+xml; charset=utf-8"
		header X-No-Minify "true"
		templates {
			mime application/xslt+xml
		}
	}

	# Block internal paths
	@internal-url {
		expression `{http.request.orig_uri.path}.matches("^/(includes/?|p/?$|domains/?)")`
	}
	handle @internal-url {
		error 404
	}

	# Don't index files in /files/
	header /files/* {
		X-Robots-Tag "noindex, nofollow"
	}

	# Remove query parameters
	@has-query {
		expression `{query} != ""`
		not path /.well-known/*
		not path /v2/*
	}
	redir @has-query {path} temporary

	# Container Registry
	redir /v2/* https://registry.maxchernoff.ca{uri} temporary

	# Prefetch
	header ?Speculation-Rules `"/assets/speculation-rules.json"`
	header /assets/speculation-rules.json {
		Content-Type application/speculationrules+json
	}

	import minify

	# Handle errors
	handle_errors {
		header Content-Type "text/html; charset=utf-8"
		rewrite * /includes/error.html
		templates
		file_server
	}
}
