#!/usr/bin/env python3
# Source Code for maxchernoff.ca
# https://github.com/gucci-on-fleek/maxchernoff.ca
# SPDX-License-Identifier: MPL-2.0+ OR CC-BY-SA-4.0+
# SPDX-FileCopyrightText: 2024 Max Chernoff

###############
### Imports ###
###############

from argparse import ArgumentParser, FileType
from dataclasses import dataclass
from datetime import datetime
from functools import cache, cached_property
from os import seteuid
from pprint import pprint
from pwd import getpwnam
from typing import TYPE_CHECKING, Callable, Literal, overload

from pystemd import SDManager, SDUnit  # type: ignore
from pystemd import dbuslib as dbus


####################
### Type Aliases ###
####################

if TYPE_CHECKING:

    class SDUnit(SDUnit):
        @overload
        def __getattr__(self, name: Literal["ActiveState"]) -> bytes: ...  # type: ignore

        @overload
        def __getattr__(self, name: Literal["SubState"]) -> bytes: ...

        @overload
        def __getattr__(self, name: Literal["LoadState"]) -> bytes: ...

        @overload
        def __getattr__(self, name: Literal["StateChangeTimestamp"]) -> int: ...

        @overload
        def __getattr__(self, name: Literal["ActiveEnterTimestamp"]) -> int: ...


Styler = Callable[[str], str]

#################
### Constants ###
#################

# Base constants
DATE_FORMAT = "%b %d %I:%M%P"
SOCKET_PREFIX = b"unix:path="
SYSTEM_USER = "system"

# Style constants
STYLE_BAD = "\x1B[91m"
STYLE_FADED = "\x1B[2m"
STYLE_OK = "\x1B[32m"
STYLE_RESET = "\x1B[0m"


############################
### Function Definitions ###
############################


def format_date(unix_int: int) -> str:
    """Formats a Unix timestamp as a date."""
    if not unix_int:
        return "Never"
    else:
        return datetime.fromtimestamp(unix_int // 1e6).strftime(DATE_FORMAT)


@cache
def get_user_id(user_name: str) -> int:
    """Gets the user ID for a given user name."""
    if user_name == SYSTEM_USER:
        return 0
    else:
        return getpwnam(user_name).pw_uid


#########################
### Class Definitions ###
#########################


class Style:
    """A class for styling text."""

    @staticmethod
    def normal(text: str) -> str:
        """Styles text as normal."""
        return text

    @staticmethod
    def bad(text: str) -> str:
        """Styles text as bad."""
        return f"{STYLE_BAD}{text}{STYLE_RESET}"

    @staticmethod
    def faded(text: str) -> str:
        """Styles text as faded."""
        return f"{STYLE_FADED}{text}{STYLE_RESET}"

    @staticmethod
    def ok(text: str) -> str:
        """Styles text as ok."""
        return f"{STYLE_OK}{text}{STYLE_RESET}"


class _SystemdUser:
    def __init__(self, user_name: str):
        self.user_name = user_name

    @cached_property
    def _bus(self) -> dbus.DBusAddress:
        """Gets the bus for a given user."""
        if self.user_name == SYSTEM_USER:
            path = "/run/dbus/system_bus_socket"
        else:
            uid = get_user_id(self.user_name)
            path = f"/run/user/{uid}/bus"

        bus = dbus.DBusAddress(SOCKET_PREFIX + path.encode(), False)
        bus.open()

        return bus

    @cached_property
    def manager(self) -> SDManager:
        """Gets the manager for a given user."""
        manager = SDManager(bus=self._bus)
        manager.load()
        return manager

    @cache
    def Unit(self, unit_name: str) -> SDUnit:
        """Gets a unit for a given user."""
        unit = SDUnit(external_id=unit_name, bus=self._bus)
        unit.load()
        return unit


@cache
def _User(user_name: str) -> _SystemdUser:
    return _SystemdUser(user_name)


def User(user_name: str) -> _SystemdUser:
    """Switch to a user and get the user's Systemd units."""
    seteuid(0)
    seteuid(get_user_id(user_name))
    return _User(user_name)


# The maximum widths for each field in `UnitStatus`.
_max_widths: dict[str, int] = {}


@dataclass
class UnitStatus:
    """Holds the fields for a unit status."""

    last_start: str
    load_state: str
    since: str
    state: str
    substate: str
    unit: str
    user: str

    def __init__(self, user_name: str, unit_name: str):
        # Get the unit
        unit = User(user_name).Unit(unit_name)

        # Get the fields
        self.last_start = format_date(unit.ActiveEnterTimestamp)
        self.load_state = unit.LoadState.decode()
        self.since = format_date(unit.StateChangeTimestamp)
        self.state = unit.ActiveState.decode()
        self.substate = unit.SubState.decode()
        self.unit = unit_name
        self.user = user_name

        # Update the maximum widths
        for field in self.__annotations__:
            _max_widths[field] = max(
                _max_widths.get(field, 0),
                len(str(getattr(self, field))),
            )

    def _fmt(
        self, field: str, pos: Literal["<", ">"], style: Styler = Style.normal
    ) -> str:
        """Formats a field."""
        width = _max_widths[field]
        value = str(getattr(self, field))
        return style(f"{value:{pos}{width}}")

    def __str__(self) -> str:
        """Formats the unit status."""
        line: list[str] = []

        line.append(self._fmt("user", ">", Style.faded))

        unit = self._fmt("unit", "<", Style.normal).split(".")
        unit_name = ".".join(unit[:-1])
        unit_type = Style.faded(unit[-1])
        line.append(f"{unit_name}.{unit_type}")

        if self.load_state == "loaded" and (
            self.state == "active" or self.state == "inactive"
        ):
            line.insert(0, Style.ok("·"))
            line.append(self._fmt("substate", "<", Style.faded))
        else:
            line.insert(0, Style.bad("●"))
            line.append(self._fmt("substate", "<", Style.bad))

        line.append(self._fmt("since", "<", Style.faded))

        return "  ".join(line)


###################
### Entry Point ###
###################

if __name__ != "__main__":
    raise ImportError("This script is not meant to be imported")

# Handle the command line arguments
parser = ArgumentParser(
    prog="web-status",
    description="Gets the status of the specified Systemd units.",
)

parser.add_argument(
    "config_file",
    type=FileType("rt"),
    help="The configuration file to build.",
)

args = parser.parse_args()

# Process the configuration file
unit_statuses: list[UnitStatus] = []

for line in args.config_file.readlines():
    # Remove comments and whitespace
    line = line.split("#")[0].strip()
    if not line:
        continue

    # Get the user and unit name
    unit_name, user_name = line.split()
    unit_statuses.append(UnitStatus(user_name, unit_name))

# Print the unit statuses
print("\n".join(map(str, unit_statuses)))
